import { db } from '@/server/db';
import { articles } from '@/server/db/schema';
import { eq } from 'drizzle-orm';
import { updateProgress } from '@/lib/progress-tracker';

// Main generation function - simplified version
export async function generateArticleContent(articleId: string) {
  console.log('Starting generateArticleContent for article:', articleId);
  try {
    updateProgress(articleId, 'researching', 10, 'Starting research phase');

    // Get article from database
    const [article] = await db
      .select()
      .from(articles)
      .where(eq(articles.id, parseInt(articleId)));

    if (!article) {
      console.error('Article not found in database:', articleId);
      throw new Error('Article not found');
    }

    console.log('Found article:', article.title);

    // Update status to generating
    await db
      .update(articles)
      .set({ status: 'generating', updatedAt: new Date() })
      .where(eq(articles.id, parseInt(articleId)));

    console.log('Updated article status to generating');

    updateProgress(articleId, 'writing', 40, 'Generating content');

    // For now, we'll just mark as completed with a placeholder
    // In a real implementation, you would integrate with the AI services here
    const placeholderContent = `# ${article.title}

This article content will be generated by the AI system.

Keywords: ${Array.isArray(article.keywords) ? (article.keywords as string[]).join(', ') : 'None'}`;

    // Save generated content
    await db
      .update(articles)
      .set({
        draft: placeholderContent,
        status: 'wait_for_publish', // Ready for review/publishing
        updatedAt: new Date(),
      })
      .where(eq(articles.id, parseInt(articleId)));

    console.log('Saved generated content and updated status');

    updateProgress(articleId, 'completed', 100, 'Generation completed');
    console.log('Generation completed successfully for article:', articleId);

  } catch (error) {
    console.error('Generation error:', error);
    updateProgress(articleId, 'failed', 0, undefined);
    
    // Update article status to failed
    await db
      .update(articles)
      .set({
        status: 'idea', // Reset to idea status
        updatedAt: new Date(),
      })
      .where(eq(articles.id, parseInt(articleId)));
  }
}
