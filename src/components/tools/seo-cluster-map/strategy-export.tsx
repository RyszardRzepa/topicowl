'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Copy, Check, FileText } from 'lucide-react';

interface StrategyExportProps {
  strategy: string;
  websiteUrl?: string;
}

export function StrategyExport({ strategy, websiteUrl }: StrategyExportProps) {
  const [copied, setCopied] = useState(false);

  const formatStrategyForCopy = (strategyText: string, url?: string) => {
    const timestamp = new Date().toLocaleDateString();
    const header = url 
      ? `SEO Strategy Report for ${url}\nGenerated on ${timestamp}\n\n`
      : `SEO Strategy Report\nGenerated on ${timestamp}\n\n`;
    
    return header + strategyText + '\n\n---\nGenerated by Topicowl SEO Cluster Map Tool';
  };

  const handleCopyToClipboard = async () => {
    try {
      const formattedStrategy = formatStrategyForCopy(strategy, websiteUrl);
      await navigator.clipboard.writeText(formattedStrategy);
      setCopied(true);
      
      // Reset copied state after 2 seconds
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = formatStrategyForCopy(strategy, websiteUrl);
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FileText className="h-5 w-5" />
          Export Strategy
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <p className="text-sm text-gray-600">
          Copy your SEO strategy to save it or share it with your team.
        </p>
        
        <Button
          onClick={handleCopyToClipboard}
          className="w-full"
          variant={copied ? "default" : "outline"}
        >
          {copied ? (
            <>
              <Check className="w-4 h-4 mr-2" />
              Copied to Clipboard!
            </>
          ) : (
            <>
              <Copy className="w-4 h-4 mr-2" />
              Copy Strategy to Clipboard
            </>
          )}
        </Button>
        
        <div className="text-xs text-gray-500 text-center">
          Want to turn this strategy into actual articles?{' '}
          <button 
            onClick={() => window.open('/sign-up', '_blank')}
            className="text-blue-600 hover:underline font-medium"
          >
            Sign up for Topicowl
          </button>
        </div>
      </CardContent>
    </Card>
  );
}